/* 
 * Easy!Appointments API
 *
 * These are the OpenAPI specs that describe the REST API of Easy!Appointments.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@easyappointments.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IServicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get all services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="with"> (optional)</param>
        /// <returns>ServiceCollection</returns>
        ServiceCollection ServicesGet (int? page = null, int? length = null, string sort = null, string q = null, string fields = null, string with = null);

        /// <summary>
        /// Get all services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="with"> (optional)</param>
        /// <returns>ApiResponse of ServiceCollection</returns>
        ApiResponse<ServiceCollection> ServicesGetWithHttpInfo (int? page = null, int? length = null, string sort = null, string q = null, string fields = null, string with = null);
        /// <summary>
        /// Create a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ServiceRecord</returns>
        ServiceRecord ServicesPost (ServicePayload body);

        /// <summary>
        /// Create a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ServiceRecord</returns>
        ApiResponse<ServiceRecord> ServicesPostWithHttpInfo (ServicePayload body);
        /// <summary>
        /// Delete a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns></returns>
        void ServicesServiceIdDelete (int? serviceId);

        /// <summary>
        /// Delete a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ServicesServiceIdDeleteWithHttpInfo (int? serviceId);
        /// <summary>
        /// Get a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>ServiceRecord</returns>
        ServiceRecord ServicesServiceIdGet (int? serviceId);

        /// <summary>
        /// Get a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>ApiResponse of ServiceRecord</returns>
        ApiResponse<ServiceRecord> ServicesServiceIdGetWithHttpInfo (int? serviceId);
        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="serviceId"></param>
        /// <returns>ServiceRecord</returns>
        ServiceRecord ServicesServiceIdPut (ServicePayload body, int? serviceId);

        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="serviceId"></param>
        /// <returns>ApiResponse of ServiceRecord</returns>
        ApiResponse<ServiceRecord> ServicesServiceIdPutWithHttpInfo (ServicePayload body, int? serviceId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get all services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="with"> (optional)</param>
        /// <returns>Task of ServiceCollection</returns>
        System.Threading.Tasks.Task<ServiceCollection> ServicesGetAsync (int? page = null, int? length = null, string sort = null, string q = null, string fields = null, string with = null);

        /// <summary>
        /// Get all services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="with"> (optional)</param>
        /// <returns>Task of ApiResponse (ServiceCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceCollection>> ServicesGetAsyncWithHttpInfo (int? page = null, int? length = null, string sort = null, string q = null, string fields = null, string with = null);
        /// <summary>
        /// Create a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ServiceRecord</returns>
        System.Threading.Tasks.Task<ServiceRecord> ServicesPostAsync (ServicePayload body);

        /// <summary>
        /// Create a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ServiceRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceRecord>> ServicesPostAsyncWithHttpInfo (ServicePayload body);
        /// <summary>
        /// Delete a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ServicesServiceIdDeleteAsync (int? serviceId);

        /// <summary>
        /// Delete a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ServicesServiceIdDeleteAsyncWithHttpInfo (int? serviceId);
        /// <summary>
        /// Get a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>Task of ServiceRecord</returns>
        System.Threading.Tasks.Task<ServiceRecord> ServicesServiceIdGetAsync (int? serviceId);

        /// <summary>
        /// Get a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>Task of ApiResponse (ServiceRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceRecord>> ServicesServiceIdGetAsyncWithHttpInfo (int? serviceId);
        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="serviceId"></param>
        /// <returns>Task of ServiceRecord</returns>
        System.Threading.Tasks.Task<ServiceRecord> ServicesServiceIdPutAsync (ServicePayload body, int? serviceId);

        /// <summary>
        /// Update a service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="serviceId"></param>
        /// <returns>Task of ApiResponse (ServiceRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<ServiceRecord>> ServicesServiceIdPutAsyncWithHttpInfo (ServicePayload body, int? serviceId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ServicesApi : IServicesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServicesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ServicesApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServicesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get all services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="with"> (optional)</param>
        /// <returns>ServiceCollection</returns>
        public ServiceCollection ServicesGet (int? page = null, int? length = null, string sort = null, string q = null, string fields = null, string with = null)
        {
             ApiResponse<ServiceCollection> localVarResponse = ServicesGetWithHttpInfo(page, length, sort, q, fields, with);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="with"> (optional)</param>
        /// <returns>ApiResponse of ServiceCollection</returns>
        public ApiResponse< ServiceCollection > ServicesGetWithHttpInfo (int? page = null, int? length = null, string sort = null, string q = null, string fields = null, string with = null)
        {

            var localVarPath = "/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (length != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "length", length)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with", with)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceCollection)));
        }

        /// <summary>
        /// Get all services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="with"> (optional)</param>
        /// <returns>Task of ServiceCollection</returns>
        public async System.Threading.Tasks.Task<ServiceCollection> ServicesGetAsync (int? page = null, int? length = null, string sort = null, string q = null, string fields = null, string with = null)
        {
             ApiResponse<ServiceCollection> localVarResponse = await ServicesGetAsyncWithHttpInfo(page, length, sort, q, fields, with);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all services 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="length"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="fields"> (optional)</param>
        /// <param name="with"> (optional)</param>
        /// <returns>Task of ApiResponse (ServiceCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServiceCollection>> ServicesGetAsyncWithHttpInfo (int? page = null, int? length = null, string sort = null, string q = null, string fields = null, string with = null)
        {

            var localVarPath = "/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (length != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "length", length)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (with != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "with", with)); // query parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceCollection)));
        }

        /// <summary>
        /// Create a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ServiceRecord</returns>
        public ServiceRecord ServicesPost (ServicePayload body)
        {
             ApiResponse<ServiceRecord> localVarResponse = ServicesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ServiceRecord</returns>
        public ApiResponse< ServiceRecord > ServicesPostWithHttpInfo (ServicePayload body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServicesApi->ServicesPost");

            var localVarPath = "/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceRecord)));
        }

        /// <summary>
        /// Create a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ServiceRecord</returns>
        public async System.Threading.Tasks.Task<ServiceRecord> ServicesPostAsync (ServicePayload body)
        {
             ApiResponse<ServiceRecord> localVarResponse = await ServicesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ServiceRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServiceRecord>> ServicesPostAsyncWithHttpInfo (ServicePayload body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServicesApi->ServicesPost");

            var localVarPath = "/services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceRecord)));
        }

        /// <summary>
        /// Delete a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns></returns>
        public void ServicesServiceIdDelete (int? serviceId)
        {
             ServicesServiceIdDeleteWithHttpInfo(serviceId);
        }

        /// <summary>
        /// Delete a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ServicesServiceIdDeleteWithHttpInfo (int? serviceId)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ServicesServiceIdDelete");

            var localVarPath = "/services/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesServiceIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ServicesServiceIdDeleteAsync (int? serviceId)
        {
             await ServicesServiceIdDeleteAsyncWithHttpInfo(serviceId);

        }

        /// <summary>
        /// Delete a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ServicesServiceIdDeleteAsyncWithHttpInfo (int? serviceId)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ServicesServiceIdDelete");

            var localVarPath = "/services/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesServiceIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>ServiceRecord</returns>
        public ServiceRecord ServicesServiceIdGet (int? serviceId)
        {
             ApiResponse<ServiceRecord> localVarResponse = ServicesServiceIdGetWithHttpInfo(serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>ApiResponse of ServiceRecord</returns>
        public ApiResponse< ServiceRecord > ServicesServiceIdGetWithHttpInfo (int? serviceId)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ServicesServiceIdGet");

            var localVarPath = "/services/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesServiceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceRecord)));
        }

        /// <summary>
        /// Get a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>Task of ServiceRecord</returns>
        public async System.Threading.Tasks.Task<ServiceRecord> ServicesServiceIdGetAsync (int? serviceId)
        {
             ApiResponse<ServiceRecord> localVarResponse = await ServicesServiceIdGetAsyncWithHttpInfo(serviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <returns>Task of ApiResponse (ServiceRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServiceRecord>> ServicesServiceIdGetAsyncWithHttpInfo (int? serviceId)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ServicesServiceIdGet");

            var localVarPath = "/services/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesServiceIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceRecord)));
        }

        /// <summary>
        /// Update a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="serviceId"></param>
        /// <returns>ServiceRecord</returns>
        public ServiceRecord ServicesServiceIdPut (ServicePayload body, int? serviceId)
        {
             ApiResponse<ServiceRecord> localVarResponse = ServicesServiceIdPutWithHttpInfo(body, serviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="serviceId"></param>
        /// <returns>ApiResponse of ServiceRecord</returns>
        public ApiResponse< ServiceRecord > ServicesServiceIdPutWithHttpInfo (ServicePayload body, int? serviceId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServicesApi->ServicesServiceIdPut");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ServicesServiceIdPut");

            var localVarPath = "/services/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesServiceIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceRecord)));
        }

        /// <summary>
        /// Update a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="serviceId"></param>
        /// <returns>Task of ServiceRecord</returns>
        public async System.Threading.Tasks.Task<ServiceRecord> ServicesServiceIdPutAsync (ServicePayload body, int? serviceId)
        {
             ApiResponse<ServiceRecord> localVarResponse = await ServicesServiceIdPutAsyncWithHttpInfo(body, serviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a service 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="serviceId"></param>
        /// <returns>Task of ApiResponse (ServiceRecord)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ServiceRecord>> ServicesServiceIdPutAsyncWithHttpInfo (ServicePayload body, int? serviceId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ServicesApi->ServicesServiceIdPut");
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ServicesServiceIdPut");

            var localVarPath = "/services/{serviceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (BasicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }
            // authentication (BearerToken) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesServiceIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ServiceRecord>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ServiceRecord) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ServiceRecord)));
        }

    }
}
