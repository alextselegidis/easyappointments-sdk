/* 
 * Easy!Appointments API
 *
 * These are the OpenAPI specs that describe the REST API of Easy!Appointments.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@easyappointments.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CategoriesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CategoriesApiTests
    {
        private CategoriesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CategoriesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CategoriesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CategoriesApi
            //Assert.IsInstanceOfType(typeof(CategoriesApi), instance, "instance is a CategoriesApi");
        }

        /// <summary>
        /// Test CategoriesCategoryIdDelete
        /// </summary>
        [Test]
        public void CategoriesCategoryIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? categoryId = null;
            //instance.CategoriesCategoryIdDelete(categoryId);
            
        }
        /// <summary>
        /// Test CategoriesCategoryIdGet
        /// </summary>
        [Test]
        public void CategoriesCategoryIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? categoryId = null;
            //var response = instance.CategoriesCategoryIdGet(categoryId);
            //Assert.IsInstanceOf<CategoryRecord> (response, "response is CategoryRecord");
        }
        /// <summary>
        /// Test CategoriesCategoryIdPut
        /// </summary>
        [Test]
        public void CategoriesCategoryIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryPayload body = null;
            //int? categoryId = null;
            //var response = instance.CategoriesCategoryIdPut(body, categoryId);
            //Assert.IsInstanceOf<CategoryRecord> (response, "response is CategoryRecord");
        }
        /// <summary>
        /// Test CategoriesGet
        /// </summary>
        [Test]
        public void CategoriesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? page = null;
            //int? length = null;
            //string sort = null;
            //string q = null;
            //string fields = null;
            //string with = null;
            //var response = instance.CategoriesGet(page, length, sort, q, fields, with);
            //Assert.IsInstanceOf<CategoryCollection> (response, "response is CategoryCollection");
        }
        /// <summary>
        /// Test CategoriesPost
        /// </summary>
        [Test]
        public void CategoriesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CategoryPayload body = null;
            //var response = instance.CategoriesPost(body);
            //Assert.IsInstanceOf<CategoryRecord> (response, "response is CategoryRecord");
        }
    }

}
