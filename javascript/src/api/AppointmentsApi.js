/*
 * Easy!Appointments API
 * These are the OpenAPI specs that describe the REST API of Easy!Appointments.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@easyappointments.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AppointmentCollection} from '../model/AppointmentCollection';
import {AppointmentPayload} from '../model/AppointmentPayload';
import {AppointmentRecord} from '../model/AppointmentRecord';
import {ErrorResponse} from '../model/ErrorResponse';

/**
* Appointments service.
* @module api/AppointmentsApi
* @version 1.0.0
*/
export class AppointmentsApi {

    /**
    * Constructs a new AppointmentsApi. 
    * @alias module:api/AppointmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the appointmentsAppointmentIdDelete operation.
     * @callback moduleapi/AppointmentsApi~appointmentsAppointmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an appointment
     * @param {Number} appointmentId 
     * @param {module:api/AppointmentsApi~appointmentsAppointmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appointmentsAppointmentIdDelete(appointmentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling appointmentsAppointmentIdDelete");
      }

      let pathParams = {
        'appointmentId': appointmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/appointments/{appointmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the appointmentsAppointmentIdGet operation.
     * @callback moduleapi/AppointmentsApi~appointmentsAppointmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an appointment
     * @param {Number} appointmentId 
     * @param {module:api/AppointmentsApi~appointmentsAppointmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    appointmentsAppointmentIdGet(appointmentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling appointmentsAppointmentIdGet");
      }

      let pathParams = {
        'appointmentId': appointmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppointmentRecord;

      return this.apiClient.callApi(
        '/appointments/{appointmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the appointmentsAppointmentIdPut operation.
     * @callback moduleapi/AppointmentsApi~appointmentsAppointmentIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an appointment
     * @param {module:model/AppointmentPayload} body 
     * @param {Number} appointmentId 
     * @param {module:api/AppointmentsApi~appointmentsAppointmentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    appointmentsAppointmentIdPut(body, appointmentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling appointmentsAppointmentIdPut");
      }
      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling appointmentsAppointmentIdPut");
      }

      let pathParams = {
        'appointmentId': appointmentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppointmentRecord;

      return this.apiClient.callApi(
        '/appointments/{appointmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the appointmentsGet operation.
     * @callback moduleapi/AppointmentsApi~appointmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentCollection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all appointments
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.length 
     * @param {String} opts.sort 
     * @param {String} opts.q 
     * @param {String} opts.fields 
     * @param {String} opts._with 
     * @param {String} opts.aggregates 
     * @param {module:api/AppointmentsApi~appointmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    appointmentsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'length': opts['length'],'sort': opts['sort'],'q': opts['q'],'fields': opts['fields'],'with': opts['_with'],'aggregates': opts['aggregates']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppointmentCollection;

      return this.apiClient.callApi(
        '/appointments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the appointmentsPost operation.
     * @callback moduleapi/AppointmentsApi~appointmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppointmentRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an appointment
     * @param {module:model/AppointmentPayload} body 
     * @param {module:api/AppointmentsApi~appointmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    appointmentsPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling appointmentsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppointmentRecord;

      return this.apiClient.callApi(
        '/appointments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}