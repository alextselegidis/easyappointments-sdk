/*
 * Easy!Appointments API
 * These are the OpenAPI specs that describe the REST API of Easy!Appointments.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@easyappointments.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CategoryCollection} from '../model/CategoryCollection';
import {CategoryPayload} from '../model/CategoryPayload';
import {CategoryRecord} from '../model/CategoryRecord';
import {ErrorResponse} from '../model/ErrorResponse';

/**
* Categories service.
* @module api/CategoriesApi
* @version 1.0.0
*/
export class CategoriesApi {

    /**
    * Constructs a new CategoriesApi. 
    * @alias module:api/CategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the categoriesCategoryIdDelete operation.
     * @callback moduleapi/CategoriesApi~categoriesCategoryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a category
     * @param {Number} categoryId 
     * @param {module:api/CategoriesApi~categoriesCategoryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    categoriesCategoryIdDelete(categoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesCategoryIdDelete");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/categories/{categoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the categoriesCategoryIdGet operation.
     * @callback moduleapi/CategoriesApi~categoriesCategoryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a category
     * @param {Number} categoryId 
     * @param {module:api/CategoriesApi~categoriesCategoryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    categoriesCategoryIdGet(categoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesCategoryIdGet");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryRecord;

      return this.apiClient.callApi(
        '/categories/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the categoriesCategoryIdPut operation.
     * @callback moduleapi/CategoriesApi~categoriesCategoryIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a category
     * @param {module:model/CategoryPayload} body 
     * @param {Number} categoryId 
     * @param {module:api/CategoriesApi~categoriesCategoryIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    categoriesCategoryIdPut(body, categoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling categoriesCategoryIdPut");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesCategoryIdPut");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryRecord;

      return this.apiClient.callApi(
        '/categories/{categoryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the categoriesGet operation.
     * @callback moduleapi/CategoriesApi~categoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryCollection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all categories
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.length 
     * @param {String} opts.sort 
     * @param {String} opts.q 
     * @param {String} opts.fields 
     * @param {String} opts._with 
     * @param {module:api/CategoriesApi~categoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    categoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'length': opts['length'],'sort': opts['sort'],'q': opts['q'],'fields': opts['fields'],'with': opts['_with']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryCollection;

      return this.apiClient.callApi(
        '/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the categoriesPost operation.
     * @callback moduleapi/CategoriesApi~categoriesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a category
     * @param {module:model/CategoryPayload} body 
     * @param {module:api/CategoriesApi~categoriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    categoriesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling categoriesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryRecord;

      return this.apiClient.callApi(
        '/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}