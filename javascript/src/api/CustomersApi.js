/*
 * Easy!Appointments API
 * These are the OpenAPI specs that describe the REST API of Easy!Appointments.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@easyappointments.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CustomerCollection} from '../model/CustomerCollection';
import {CustomerPayload} from '../model/CustomerPayload';
import {CustomerRecord} from '../model/CustomerRecord';
import {ErrorResponse} from '../model/ErrorResponse';

/**
* Customers service.
* @module api/CustomersApi
* @version 1.0.0
*/
export class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:api/CustomersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the customersCustomerIdDelete operation.
     * @callback moduleapi/CustomersApi~customersCustomerIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a customer
     * @param {Number} customerId 
     * @param {module:api/CustomersApi~customersCustomerIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customersCustomerIdDelete(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdDelete");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/customers/{customerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersCustomerIdGet operation.
     * @callback moduleapi/CustomersApi~customersCustomerIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a customer
     * @param {Number} customerId 
     * @param {module:api/CustomersApi~customersCustomerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersCustomerIdGet(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdGet");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerRecord;

      return this.apiClient.callApi(
        '/customers/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersCustomerIdPut operation.
     * @callback moduleapi/CustomersApi~customersCustomerIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a customer
     * @param {module:model/CustomerPayload} body 
     * @param {Number} customerId 
     * @param {module:api/CustomersApi~customersCustomerIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersCustomerIdPut(body, customerId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customersCustomerIdPut");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdPut");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerRecord;

      return this.apiClient.callApi(
        '/customers/{customerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersGet operation.
     * @callback moduleapi/CustomersApi~customersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerCollection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all customers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.length 
     * @param {String} opts.sort 
     * @param {String} opts.q 
     * @param {String} opts.fields 
     * @param {String} opts._with 
     * @param {module:api/CustomersApi~customersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'length': opts['length'],'sort': opts['sort'],'q': opts['q'],'fields': opts['fields'],'with': opts['_with']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerCollection;

      return this.apiClient.callApi(
        '/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersPost operation.
     * @callback moduleapi/CustomersApi~customersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a customer
     * @param {module:model/CustomerPayload} body 
     * @param {module:api/CustomersApi~customersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling customersPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerRecord;

      return this.apiClient.callApi(
        '/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}