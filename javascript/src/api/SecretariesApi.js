/*
 * Easy!Appointments API
 * These are the OpenAPI specs that describe the REST API of Easy!Appointments.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@easyappointments.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponse} from '../model/ErrorResponse';
import {SecretaryCollection} from '../model/SecretaryCollection';
import {SecretaryPayload} from '../model/SecretaryPayload';
import {SecretaryRecord} from '../model/SecretaryRecord';

/**
* Secretaries service.
* @module api/SecretariesApi
* @version 1.0.0
*/
export class SecretariesApi {

    /**
    * Constructs a new SecretariesApi. 
    * @alias module:api/SecretariesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the secretariesGet operation.
     * @callback moduleapi/SecretariesApi~secretariesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretaryCollection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all secretaries
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.length 
     * @param {String} opts.sort 
     * @param {String} opts.q 
     * @param {String} opts.fields 
     * @param {String} opts._with 
     * @param {module:api/SecretariesApi~secretariesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    secretariesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'length': opts['length'],'sort': opts['sort'],'q': opts['q'],'fields': opts['fields'],'with': opts['_with']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretaryCollection;

      return this.apiClient.callApi(
        '/secretaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the secretariesPost operation.
     * @callback moduleapi/SecretariesApi~secretariesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretaryRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a secretary
     * @param {module:model/SecretaryPayload} body 
     * @param {module:api/SecretariesApi~secretariesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    secretariesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling secretariesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretaryRecord;

      return this.apiClient.callApi(
        '/secretaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the secretariesSecretaryIdDelete operation.
     * @callback moduleapi/SecretariesApi~secretariesSecretaryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a secretary
     * @param {Number} secretaryId 
     * @param {module:api/SecretariesApi~secretariesSecretaryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    secretariesSecretaryIdDelete(secretaryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'secretaryId' is set
      if (secretaryId === undefined || secretaryId === null) {
        throw new Error("Missing the required parameter 'secretaryId' when calling secretariesSecretaryIdDelete");
      }

      let pathParams = {
        'secretaryId': secretaryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/secretaries/{secretaryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the secretariesSecretaryIdGet operation.
     * @callback moduleapi/SecretariesApi~secretariesSecretaryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretaryRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a secretary
     * @param {Number} secretaryId 
     * @param {module:api/SecretariesApi~secretariesSecretaryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    secretariesSecretaryIdGet(secretaryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'secretaryId' is set
      if (secretaryId === undefined || secretaryId === null) {
        throw new Error("Missing the required parameter 'secretaryId' when calling secretariesSecretaryIdGet");
      }

      let pathParams = {
        'secretaryId': secretaryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecretaryRecord;

      return this.apiClient.callApi(
        '/secretaries/{secretaryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the secretariesSecretaryIdPut operation.
     * @callback moduleapi/SecretariesApi~secretariesSecretaryIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecretaryRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a secretary
     * @param {module:model/SecretaryPayload} body 
     * @param {Number} secretaryId 
     * @param {module:api/SecretariesApi~secretariesSecretaryIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    secretariesSecretaryIdPut(body, secretaryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling secretariesSecretaryIdPut");
      }
      // verify the required parameter 'secretaryId' is set
      if (secretaryId === undefined || secretaryId === null) {
        throw new Error("Missing the required parameter 'secretaryId' when calling secretariesSecretaryIdPut");
      }

      let pathParams = {
        'secretaryId': secretaryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SecretaryRecord;

      return this.apiClient.callApi(
        '/secretaries/{secretaryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}