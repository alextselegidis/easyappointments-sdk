/*
 * Easy!Appointments API
 * These are the OpenAPI specs that describe the REST API of Easy!Appointments.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@easyappointments.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.30
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorResponse} from '../model/ErrorResponse';
import {UnavailabilityCollection} from '../model/UnavailabilityCollection';
import {UnavailabilityPayload} from '../model/UnavailabilityPayload';
import {UnavailabilityRecord} from '../model/UnavailabilityRecord';

/**
* Unavailabilities service.
* @module api/UnavailabilitiesApi
* @version 1.0.0
*/
export class UnavailabilitiesApi {

    /**
    * Constructs a new UnavailabilitiesApi. 
    * @alias module:api/UnavailabilitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the unavailabilitiesGet operation.
     * @callback moduleapi/UnavailabilitiesApi~unavailabilitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnavailabilityCollection{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all unavailabilities
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.length 
     * @param {String} opts.sort 
     * @param {String} opts.q 
     * @param {String} opts.fields 
     * @param {String} opts._with 
     * @param {module:api/UnavailabilitiesApi~unavailabilitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    unavailabilitiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'length': opts['length'],'sort': opts['sort'],'q': opts['q'],'fields': opts['fields'],'with': opts['_with']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnavailabilityCollection;

      return this.apiClient.callApi(
        '/unavailabilities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unavailabilitiesPost operation.
     * @callback moduleapi/UnavailabilitiesApi~unavailabilitiesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnavailabilityRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an unavailability
     * @param {module:model/UnavailabilityPayload} body 
     * @param {module:api/UnavailabilitiesApi~unavailabilitiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    unavailabilitiesPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unavailabilitiesPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnavailabilityRecord;

      return this.apiClient.callApi(
        '/unavailabilities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unavailabilitiesUnavailabilityIdDelete operation.
     * @callback moduleapi/UnavailabilitiesApi~unavailabilitiesUnavailabilityIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an unavailability
     * @param {Number} unavailabilityId 
     * @param {module:api/UnavailabilitiesApi~unavailabilitiesUnavailabilityIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unavailabilitiesUnavailabilityIdDelete(unavailabilityId, callback) {
      
      let postBody = null;
      // verify the required parameter 'unavailabilityId' is set
      if (unavailabilityId === undefined || unavailabilityId === null) {
        throw new Error("Missing the required parameter 'unavailabilityId' when calling unavailabilitiesUnavailabilityIdDelete");
      }

      let pathParams = {
        'unavailabilityId': unavailabilityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/unavailabilities/{unavailabilityId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unavailabilitiesUnavailabilityIdGet operation.
     * @callback moduleapi/UnavailabilitiesApi~unavailabilitiesUnavailabilityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnavailabilityRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an unavailability
     * @param {Number} unavailabilityId 
     * @param {module:api/UnavailabilitiesApi~unavailabilitiesUnavailabilityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    unavailabilitiesUnavailabilityIdGet(unavailabilityId, callback) {
      
      let postBody = null;
      // verify the required parameter 'unavailabilityId' is set
      if (unavailabilityId === undefined || unavailabilityId === null) {
        throw new Error("Missing the required parameter 'unavailabilityId' when calling unavailabilitiesUnavailabilityIdGet");
      }

      let pathParams = {
        'unavailabilityId': unavailabilityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnavailabilityRecord;

      return this.apiClient.callApi(
        '/unavailabilities/{unavailabilityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the unavailabilitiesUnavailabilityIdPut operation.
     * @callback moduleapi/UnavailabilitiesApi~unavailabilitiesUnavailabilityIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnavailabilityRecord{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an unavailability
     * @param {module:model/UnavailabilityPayload} body 
     * @param {Number} unavailabilityId 
     * @param {module:api/UnavailabilitiesApi~unavailabilitiesUnavailabilityIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    unavailabilitiesUnavailabilityIdPut(body, unavailabilityId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unavailabilitiesUnavailabilityIdPut");
      }
      // verify the required parameter 'unavailabilityId' is set
      if (unavailabilityId === undefined || unavailabilityId === null) {
        throw new Error("Missing the required parameter 'unavailabilityId' when calling unavailabilitiesUnavailabilityIdPut");
      }

      let pathParams = {
        'unavailabilityId': unavailabilityId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['BasicAuth', 'BearerToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnavailabilityRecord;

      return this.apiClient.callApi(
        '/unavailabilities/{unavailabilityId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}