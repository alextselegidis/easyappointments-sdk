<?php
/**
 * ProviderPayloadSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easy!Appointments API
 *
 * These are the OpenAPI specs that describe the REST API of Easy!Appointments.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@easyappointments.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.30
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProviderPayloadSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProviderPayloadSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProviderPayload_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'username' => 'string',
'password' => 'string',
'notifications' => 'bool',
'calendar_view' => 'string',
'google_sync' => 'bool',
'google_calendar' => 'string',
'google_token' => 'string',
'sync_future_days' => 'string',
'sync_past_days' => 'string',
'working_plan' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'username' => null,
'password' => 'password',
'notifications' => null,
'calendar_view' => null,
'google_sync' => null,
'google_calendar' => null,
'google_token' => null,
'sync_future_days' => null,
'sync_past_days' => null,
'working_plan' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'username' => 'username',
'password' => 'password',
'notifications' => 'notifications',
'calendar_view' => 'calendarView',
'google_sync' => 'googleSync',
'google_calendar' => 'googleCalendar',
'google_token' => 'googleToken',
'sync_future_days' => 'syncFutureDays',
'sync_past_days' => 'syncPastDays',
'working_plan' => 'workingPlan'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'username' => 'setUsername',
'password' => 'setPassword',
'notifications' => 'setNotifications',
'calendar_view' => 'setCalendarView',
'google_sync' => 'setGoogleSync',
'google_calendar' => 'setGoogleCalendar',
'google_token' => 'setGoogleToken',
'sync_future_days' => 'setSyncFutureDays',
'sync_past_days' => 'setSyncPastDays',
'working_plan' => 'setWorkingPlan'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'username' => 'getUsername',
'password' => 'getPassword',
'notifications' => 'getNotifications',
'calendar_view' => 'getCalendarView',
'google_sync' => 'getGoogleSync',
'google_calendar' => 'getGoogleCalendar',
'google_token' => 'getGoogleToken',
'sync_future_days' => 'getSyncFutureDays',
'sync_past_days' => 'getSyncPastDays',
'working_plan' => 'getWorkingPlan'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['notifications'] = isset($data['notifications']) ? $data['notifications'] : null;
        $this->container['calendar_view'] = isset($data['calendar_view']) ? $data['calendar_view'] : null;
        $this->container['google_sync'] = isset($data['google_sync']) ? $data['google_sync'] : null;
        $this->container['google_calendar'] = isset($data['google_calendar']) ? $data['google_calendar'] : null;
        $this->container['google_token'] = isset($data['google_token']) ? $data['google_token'] : null;
        $this->container['sync_future_days'] = isset($data['sync_future_days']) ? $data['sync_future_days'] : null;
        $this->container['sync_past_days'] = isset($data['sync_past_days']) ? $data['sync_past_days'] : null;
        $this->container['working_plan'] = isset($data['working_plan']) ? $data['working_plan'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return bool
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param bool $notifications notifications
     *
     * @return $this
     */
    public function setNotifications($notifications)
    {
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets calendar_view
     *
     * @return string
     */
    public function getCalendarView()
    {
        return $this->container['calendar_view'];
    }

    /**
     * Sets calendar_view
     *
     * @param string $calendar_view calendar_view
     *
     * @return $this
     */
    public function setCalendarView($calendar_view)
    {
        $this->container['calendar_view'] = $calendar_view;

        return $this;
    }

    /**
     * Gets google_sync
     *
     * @return bool
     */
    public function getGoogleSync()
    {
        return $this->container['google_sync'];
    }

    /**
     * Sets google_sync
     *
     * @param bool $google_sync google_sync
     *
     * @return $this
     */
    public function setGoogleSync($google_sync)
    {
        $this->container['google_sync'] = $google_sync;

        return $this;
    }

    /**
     * Gets google_calendar
     *
     * @return string
     */
    public function getGoogleCalendar()
    {
        return $this->container['google_calendar'];
    }

    /**
     * Sets google_calendar
     *
     * @param string $google_calendar google_calendar
     *
     * @return $this
     */
    public function setGoogleCalendar($google_calendar)
    {
        $this->container['google_calendar'] = $google_calendar;

        return $this;
    }

    /**
     * Gets google_token
     *
     * @return string
     */
    public function getGoogleToken()
    {
        return $this->container['google_token'];
    }

    /**
     * Sets google_token
     *
     * @param string $google_token google_token
     *
     * @return $this
     */
    public function setGoogleToken($google_token)
    {
        $this->container['google_token'] = $google_token;

        return $this;
    }

    /**
     * Gets sync_future_days
     *
     * @return string
     */
    public function getSyncFutureDays()
    {
        return $this->container['sync_future_days'];
    }

    /**
     * Sets sync_future_days
     *
     * @param string $sync_future_days sync_future_days
     *
     * @return $this
     */
    public function setSyncFutureDays($sync_future_days)
    {
        $this->container['sync_future_days'] = $sync_future_days;

        return $this;
    }

    /**
     * Gets sync_past_days
     *
     * @return string
     */
    public function getSyncPastDays()
    {
        return $this->container['sync_past_days'];
    }

    /**
     * Sets sync_past_days
     *
     * @param string $sync_past_days sync_past_days
     *
     * @return $this
     */
    public function setSyncPastDays($sync_past_days)
    {
        $this->container['sync_past_days'] = $sync_past_days;

        return $this;
    }

    /**
     * Gets working_plan
     *
     * @return string
     */
    public function getWorkingPlan()
    {
        return $this->container['working_plan'];
    }

    /**
     * Sets working_plan
     *
     * @param string $working_plan working_plan
     *
     * @return $this
     */
    public function setWorkingPlan($working_plan)
    {
        $this->container['working_plan'] = $working_plan;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
