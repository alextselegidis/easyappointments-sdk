# coding: utf-8

"""
    Easy!Appointments API

    These are the OpenAPI specs that describe the REST API of Easy!Appointments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@easyappointments.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnavailabilityRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'book': 'str',
        'start': 'str',
        'end': 'str',
        'hash': 'str',
        'location': 'str',
        'notes': 'str',
        'provider_id': 'int',
        'google_calendar_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'book': 'book',
        'start': 'start',
        'end': 'end',
        'hash': 'hash',
        'location': 'location',
        'notes': 'notes',
        'provider_id': 'providerId',
        'google_calendar_id': 'googleCalendarId'
    }

    def __init__(self, id=None, book=None, start=None, end=None, hash=None, location=None, notes=None, provider_id=None, google_calendar_id=None):  # noqa: E501
        """UnavailabilityRecord - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._book = None
        self._start = None
        self._end = None
        self._hash = None
        self._location = None
        self._notes = None
        self._provider_id = None
        self._google_calendar_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if book is not None:
            self.book = book
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if hash is not None:
            self.hash = hash
        if location is not None:
            self.location = location
        if notes is not None:
            self.notes = notes
        if provider_id is not None:
            self.provider_id = provider_id
        if google_calendar_id is not None:
            self.google_calendar_id = google_calendar_id

    @property
    def id(self):
        """Gets the id of this UnavailabilityRecord.  # noqa: E501


        :return: The id of this UnavailabilityRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UnavailabilityRecord.


        :param id: The id of this UnavailabilityRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def book(self):
        """Gets the book of this UnavailabilityRecord.  # noqa: E501


        :return: The book of this UnavailabilityRecord.  # noqa: E501
        :rtype: str
        """
        return self._book

    @book.setter
    def book(self, book):
        """Sets the book of this UnavailabilityRecord.


        :param book: The book of this UnavailabilityRecord.  # noqa: E501
        :type: str
        """

        self._book = book

    @property
    def start(self):
        """Gets the start of this UnavailabilityRecord.  # noqa: E501


        :return: The start of this UnavailabilityRecord.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this UnavailabilityRecord.


        :param start: The start of this UnavailabilityRecord.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this UnavailabilityRecord.  # noqa: E501


        :return: The end of this UnavailabilityRecord.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this UnavailabilityRecord.


        :param end: The end of this UnavailabilityRecord.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def hash(self):
        """Gets the hash of this UnavailabilityRecord.  # noqa: E501


        :return: The hash of this UnavailabilityRecord.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this UnavailabilityRecord.


        :param hash: The hash of this UnavailabilityRecord.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def location(self):
        """Gets the location of this UnavailabilityRecord.  # noqa: E501


        :return: The location of this UnavailabilityRecord.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UnavailabilityRecord.


        :param location: The location of this UnavailabilityRecord.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def notes(self):
        """Gets the notes of this UnavailabilityRecord.  # noqa: E501


        :return: The notes of this UnavailabilityRecord.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UnavailabilityRecord.


        :param notes: The notes of this UnavailabilityRecord.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def provider_id(self):
        """Gets the provider_id of this UnavailabilityRecord.  # noqa: E501


        :return: The provider_id of this UnavailabilityRecord.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this UnavailabilityRecord.


        :param provider_id: The provider_id of this UnavailabilityRecord.  # noqa: E501
        :type: int
        """

        self._provider_id = provider_id

    @property
    def google_calendar_id(self):
        """Gets the google_calendar_id of this UnavailabilityRecord.  # noqa: E501


        :return: The google_calendar_id of this UnavailabilityRecord.  # noqa: E501
        :rtype: int
        """
        return self._google_calendar_id

    @google_calendar_id.setter
    def google_calendar_id(self, google_calendar_id):
        """Sets the google_calendar_id of this UnavailabilityRecord.


        :param google_calendar_id: The google_calendar_id of this UnavailabilityRecord.  # noqa: E501
        :type: int
        """

        self._google_calendar_id = google_calendar_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnavailabilityRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnavailabilityRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
