# coding: utf-8

"""
    Easy!Appointments API

    These are the OpenAPI specs that describe the REST API of Easy!Appointments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@easyappointments.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdminRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'mobile': 'str',
        'phone': 'str',
        'address': 'str',
        'city': 'str',
        'zip': 'str',
        'notes': 'str',
        'timezone': 'str',
        'settings': 'AdminRecordSettings'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'mobile': 'mobile',
        'phone': 'phone',
        'address': 'address',
        'city': 'city',
        'zip': 'zip',
        'notes': 'notes',
        'timezone': 'timezone',
        'settings': 'settings'
    }

    def __init__(self, id=None, first_name=None, last_name=None, email=None, mobile=None, phone=None, address=None, city=None, zip=None, notes=None, timezone=None, settings=None):  # noqa: E501
        """AdminRecord - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._mobile = None
        self._phone = None
        self._address = None
        self._city = None
        self._zip = None
        self._notes = None
        self._timezone = None
        self._settings = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if mobile is not None:
            self.mobile = mobile
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address
        if city is not None:
            self.city = city
        if zip is not None:
            self.zip = zip
        if notes is not None:
            self.notes = notes
        if timezone is not None:
            self.timezone = timezone
        if settings is not None:
            self.settings = settings

    @property
    def id(self):
        """Gets the id of this AdminRecord.  # noqa: E501


        :return: The id of this AdminRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdminRecord.


        :param id: The id of this AdminRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this AdminRecord.  # noqa: E501


        :return: The first_name of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AdminRecord.


        :param first_name: The first_name of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AdminRecord.  # noqa: E501


        :return: The last_name of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AdminRecord.


        :param last_name: The last_name of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this AdminRecord.  # noqa: E501


        :return: The email of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AdminRecord.


        :param email: The email of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def mobile(self):
        """Gets the mobile of this AdminRecord.  # noqa: E501


        :return: The mobile of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this AdminRecord.


        :param mobile: The mobile of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def phone(self):
        """Gets the phone of this AdminRecord.  # noqa: E501


        :return: The phone of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AdminRecord.


        :param phone: The phone of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def address(self):
        """Gets the address of this AdminRecord.  # noqa: E501


        :return: The address of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AdminRecord.


        :param address: The address of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def city(self):
        """Gets the city of this AdminRecord.  # noqa: E501


        :return: The city of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AdminRecord.


        :param city: The city of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def zip(self):
        """Gets the zip of this AdminRecord.  # noqa: E501


        :return: The zip of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this AdminRecord.


        :param zip: The zip of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def notes(self):
        """Gets the notes of this AdminRecord.  # noqa: E501


        :return: The notes of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AdminRecord.


        :param notes: The notes of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def timezone(self):
        """Gets the timezone of this AdminRecord.  # noqa: E501


        :return: The timezone of this AdminRecord.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AdminRecord.


        :param timezone: The timezone of this AdminRecord.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def settings(self):
        """Gets the settings of this AdminRecord.  # noqa: E501


        :return: The settings of this AdminRecord.  # noqa: E501
        :rtype: AdminRecordSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this AdminRecord.


        :param settings: The settings of this AdminRecord.  # noqa: E501
        :type: AdminRecordSettings
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
