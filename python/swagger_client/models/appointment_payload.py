# coding: utf-8

"""
    Easy!Appointments API

    These are the OpenAPI specs that describe the REST API of Easy!Appointments.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@easyappointments.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AppointmentPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'str',
        'end': 'str',
        'location': 'str',
        'notes': 'str',
        'customer_id': 'int',
        'provider_id': 'int',
        'service_id': 'int'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'location': 'location',
        'notes': 'notes',
        'customer_id': 'customerId',
        'provider_id': 'providerId',
        'service_id': 'serviceId'
    }

    def __init__(self, start=None, end=None, location=None, notes=None, customer_id=None, provider_id=None, service_id=None):  # noqa: E501
        """AppointmentPayload - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._end = None
        self._location = None
        self._notes = None
        self._customer_id = None
        self._provider_id = None
        self._service_id = None
        self.discriminator = None
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if location is not None:
            self.location = location
        if notes is not None:
            self.notes = notes
        if customer_id is not None:
            self.customer_id = customer_id
        if provider_id is not None:
            self.provider_id = provider_id
        if service_id is not None:
            self.service_id = service_id

    @property
    def start(self):
        """Gets the start of this AppointmentPayload.  # noqa: E501


        :return: The start of this AppointmentPayload.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AppointmentPayload.


        :param start: The start of this AppointmentPayload.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this AppointmentPayload.  # noqa: E501


        :return: The end of this AppointmentPayload.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AppointmentPayload.


        :param end: The end of this AppointmentPayload.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def location(self):
        """Gets the location of this AppointmentPayload.  # noqa: E501


        :return: The location of this AppointmentPayload.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AppointmentPayload.


        :param location: The location of this AppointmentPayload.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def notes(self):
        """Gets the notes of this AppointmentPayload.  # noqa: E501


        :return: The notes of this AppointmentPayload.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AppointmentPayload.


        :param notes: The notes of this AppointmentPayload.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def customer_id(self):
        """Gets the customer_id of this AppointmentPayload.  # noqa: E501


        :return: The customer_id of this AppointmentPayload.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AppointmentPayload.


        :param customer_id: The customer_id of this AppointmentPayload.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def provider_id(self):
        """Gets the provider_id of this AppointmentPayload.  # noqa: E501


        :return: The provider_id of this AppointmentPayload.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this AppointmentPayload.


        :param provider_id: The provider_id of this AppointmentPayload.  # noqa: E501
        :type: int
        """

        self._provider_id = provider_id

    @property
    def service_id(self):
        """Gets the service_id of this AppointmentPayload.  # noqa: E501


        :return: The service_id of this AppointmentPayload.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this AppointmentPayload.


        :param service_id: The service_id of this AppointmentPayload.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppointmentPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppointmentPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
