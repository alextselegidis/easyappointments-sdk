=begin
#Easy!Appointments API

#These are the OpenAPI specs that describe the REST API of Easy!Appointments.

OpenAPI spec version: 1.0.0
Contact: info@easyappointments.org
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.30
=end

module SwaggerClient
  class AdminsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an admin
    # @param admin_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def admins_admin_id_delete(admin_id, opts = {})
      admins_admin_id_delete_with_http_info(admin_id, opts)
      nil
    end

    # Delete an admin
    # @param admin_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def admins_admin_id_delete_with_http_info(admin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminsApi.admins_admin_id_delete ...'
      end
      # verify the required parameter 'admin_id' is set
      if @api_client.config.client_side_validation && admin_id.nil?
        fail ArgumentError, "Missing the required parameter 'admin_id' when calling AdminsApi.admins_admin_id_delete"
      end
      # resource path
      local_var_path = '/admins/{adminId}'.sub('{' + 'adminId' + '}', admin_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerToken']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#admins_admin_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an admin
    # @param admin_id 
    # @param [Hash] opts the optional parameters
    # @return [AdminRecord]
    def admins_admin_id_get(admin_id, opts = {})
      data, _status_code, _headers = admins_admin_id_get_with_http_info(admin_id, opts)
      data
    end

    # Get an admin
    # @param admin_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminRecord, Integer, Hash)>] AdminRecord data, response status code and response headers
    def admins_admin_id_get_with_http_info(admin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminsApi.admins_admin_id_get ...'
      end
      # verify the required parameter 'admin_id' is set
      if @api_client.config.client_side_validation && admin_id.nil?
        fail ArgumentError, "Missing the required parameter 'admin_id' when calling AdminsApi.admins_admin_id_get"
      end
      # resource path
      local_var_path = '/admins/{adminId}'.sub('{' + 'adminId' + '}', admin_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AdminRecord' 

      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#admins_admin_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an admin
    # @param body 
    # @param admin_id 
    # @param [Hash] opts the optional parameters
    # @return [AdminRecord]
    def admins_admin_id_put(body, admin_id, opts = {})
      data, _status_code, _headers = admins_admin_id_put_with_http_info(body, admin_id, opts)
      data
    end

    # Update an admin
    # @param body 
    # @param admin_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminRecord, Integer, Hash)>] AdminRecord data, response status code and response headers
    def admins_admin_id_put_with_http_info(body, admin_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminsApi.admins_admin_id_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.admins_admin_id_put"
      end
      # verify the required parameter 'admin_id' is set
      if @api_client.config.client_side_validation && admin_id.nil?
        fail ArgumentError, "Missing the required parameter 'admin_id' when calling AdminsApi.admins_admin_id_put"
      end
      # resource path
      local_var_path = '/admins/{adminId}'.sub('{' + 'adminId' + '}', admin_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AdminRecord' 

      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerToken']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#admins_admin_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all admins
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :length 
    # @option opts [String] :sort 
    # @option opts [String] :q 
    # @option opts [String] :fields 
    # @option opts [String] :with 
    # @return [AdminCollection]
    def admins_get(opts = {})
      data, _status_code, _headers = admins_get_with_http_info(opts)
      data
    end

    # Get all admins
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :length 
    # @option opts [String] :sort 
    # @option opts [String] :q 
    # @option opts [String] :fields 
    # @option opts [String] :with 
    # @return [Array<(AdminCollection, Integer, Hash)>] AdminCollection data, response status code and response headers
    def admins_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminsApi.admins_get ...'
      end
      # resource path
      local_var_path = '/admins'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'length'] = opts[:'length'] if !opts[:'length'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'with'] = opts[:'with'] if !opts[:'with'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'AdminCollection' 

      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerToken']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#admins_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an admin
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AdminRecord]
    def admins_post(body, opts = {})
      data, _status_code, _headers = admins_post_with_http_info(body, opts)
      data
    end

    # Create an admin
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminRecord, Integer, Hash)>] AdminRecord data, response status code and response headers
    def admins_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminsApi.admins_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AdminsApi.admins_post"
      end
      # resource path
      local_var_path = '/admins'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'AdminRecord' 

      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerToken']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminsApi#admins_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
